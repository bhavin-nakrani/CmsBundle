{
  "name": "Cmsbundle",
  "tagline": "Simple CMS bundle for Symfony",
  "body": "[![SensioLabsInsight](https://insight.sensiolabs.com/projects/dcb6d7ad-83c6-458d-acd6-8dde8b8020bc/mini.png)](https://insight.sensiolabs.com/projects/dcb6d7ad-83c6-458d-acd6-8dde8b8020bc)\r\n[![Coverage Status](https://coveralls.io/repos/Orbitale/CmsBundle/badge.svg?branch=master)](https://coveralls.io/r/Orbitale/CmsBundle?branch=master)\r\n[![Build Status](https://travis-ci.org/Orbitale/CmsBundle.svg?branch=master)](https://travis-ci.org/Orbitale/CmsBundle)\r\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/Orbitale/CmsBundle/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/Orbitale/CmsBundle/?branch=master)\r\n\r\n:warning: You're looking at the 2.x branch documentation.<br>\r\nIf you need information about 1.x, go [here](https://github.com/Orbitale/CmsBundle/tree/1.x)\r\n\r\n##### Index\r\n\r\n* [Requirements](#requirements)\r\n* [Install](#install)\r\n* [Setup](#setup)\r\n* [Usage](#usage)\r\n * [Manage pages](#manage-pages)\r\n * [View pages](#view-pages)\r\n * [Generate a route based on a single page](#generate-a-route-based-on-a-single-page)\r\n* [Change homepage](#change-homepage)\r\n* [Page restriction based `host` and/or `locale`](#page-restriction)\r\n* [Design](#design)\r\n * [Using different layouts](#using-different-layouts)\r\n * [Advanced layout configuration](#advanced-layout-configuration)\r\n * [Changing the \"breadcrumbs\" look](#breadcrumbs)\r\n* [Setup EasyAdminBundle to manage pages and categories in its back-end](#easyadmin)\r\n* [Configuration reference](#configuration-reference)\r\n* [Changelog](#changelog)\r\n\r\n# Orbitale CMS Bundle\r\n\r\nThis bundle is a simple helper to create a very simple CMS based on a classic system with Pages and Categories.\r\n\r\n## Requirements\r\n\r\n* PHP 5.4+\r\n* Symfony 2.3+ or 3.0+\r\n* Doctrine ORM\r\n\r\n## Install\r\n\r\nRequire the bundle by using [Composer](https://getcomposer.org/):\r\n\r\n```shell\r\n$ composer require orbitale/cms-bundle\r\n```\r\n\r\n## Setup\r\n\r\nRegister the necessary bundles in your Kernel:\r\n\r\n```php\r\n<?php\r\n// app/AppKernel.php\r\npublic function registerBundles()\r\n{\r\n    $bundles = [\r\n        // ...\r\n        new Orbitale\\Bundle\\CmsBundle\\OrbitaleCmsBundle(),\r\n    ];\r\n}\r\n\r\n```\r\n\r\n### Import the necessary routing files.\r\n\r\n*Warning:*\r\n Both `Page` and `Category` controllers have to be \"alone\" in their routing path,\r\n because there is a \"tree\" routing management. If you set the prefix as \"/\"\r\n or any other path you are already using, make sure that `OrbitaleCmsBundle`\r\n routes are loaded **at the end of your routing file**, or you may have some\r\n unexpected \"404\" or other errors, depending on the routes priority.<br>\r\n This is why we recommend you to **load the `CategoryController` _before_ the\r\n `PageController`**, and let both routes config be **the last ones** of your\r\n `routing.yml` file.<br>\r\n **Note:** In technical terms, the whole URI is scanned, not a simple part of it,\r\n this is why it can analyze very deep URIs like\r\n `/home/blog/parent-link/child-link/element`, and check all pages/categories.\r\n\r\nExample:\r\n\r\n```yml\r\n# app/config/routing.yml\r\norbitale_cms_category:\r\n    resource: \"@OrbitaleCmsBundle/Controller/CategoryController.php\"\r\n    type:     annotation\r\n    prefix:   /category/\r\n\r\norbitale_cms_page:\r\n    resource: \"@OrbitaleCmsBundle/Controller/PageController.php\"\r\n    type:     annotation\r\n    prefix:   /page/\r\n```\r\n\r\n### Create your entities\r\n\r\nThis bundle supports Doctrine ORM only.\r\n\r\nIn order to use it, you must create your own entities and configure the bundle with them.\r\n\r\nUpdate your config:\r\n\r\n```yml\r\n# app/config/config.yml\r\norbitale_cms:\r\n    page_class: AppBundle\\Entity\\Page\r\n    category_class: AppBundle\\Entity\\Category\r\n```\r\n\r\n#### Create the `Page` entity and add it to your config\r\n\r\n```php\r\n<?php\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\nuse Orbitale\\Bundle\\CmsBundle\\Entity\\Page as BasePage;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\n\r\n/**\r\n * @ORM\\Entity(repositoryClass=\"Orbitale\\Bundle\\CmsBundle\\Repository\\PageRepository\")\r\n * @ORM\\Table(name=\"orbitale_cms_pages\")\r\n */\r\nclass Page extends BasePage\r\n{\r\n    /**\r\n     * @var int\r\n     * @ORM\\Column(name=\"id\", type=\"integer\")\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\r\n     */\r\n    protected $id;\r\n\r\n    /**\r\n     * @return int\r\n     */\r\n    public function getId()\r\n    {\r\n        return $this->id;\r\n    }\r\n}\r\n```\r\n\r\n#### Create the `Category` entity and add it to your config\r\n\r\n```php\r\n<?php\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\nuse Orbitale\\Bundle\\CmsBundle\\Entity\\Category as BaseCategory;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\n\r\n/**\r\n * @ORM\\Entity(repositoryClass=\"Orbitale\\Bundle\\CmsBundle\\Repository\\CategoryRepository\")\r\n * @ORM\\Table(name=\"orbitale_cms_categories\")\r\n */\r\nclass Category extends BaseCategory\r\n{\r\n    /**\r\n     * @var int\r\n     * @ORM\\Column(name=\"id\", type=\"integer\")\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\r\n     */\r\n    protected $id;\r\n\r\n    /**\r\n     * @return int\r\n     */\r\n    public function getId()\r\n    {\r\n        return $this->id;\r\n    }\r\n}\r\n\r\n```\r\n\r\n### Update your db schema\r\n\r\nUpdate your database by executing this command from your Symfony root directory:\r\n\r\n```bash\r\n$ php app/console doctrine:schema:update --force\r\n```\r\n\r\n## Usage\r\n\r\n### Manage pages\r\n\r\nTo manage your pages, you should use any back-end solution, like\r\n[EasyAdmin](https://github.com/javiereguiluz/EasyAdminBundle/) (which we suggest)\r\nor [SonataAdmin](https://sonata-project.org/bundles/admin), or any other backend\r\nsolution that can operate CRUD actions on entities.\r\nYou must have configured it to manage at least the\r\n`Orbitale\\Bundle\\CmsBundle\\Entity\\Page` entity.\r\n\r\n### View pages\r\n\r\nThe `PageController` handles some methods to view pages with a single\r\n`indexAction()`, and the `CategoryController` uses its route to show all pages\r\nwithin a specified `Category`.\r\n\r\nThe URI for both is simply `/{slug}` where `slug` is the... page or category slug.\r\n\r\nIf your page or category has one `parent`, then the URI is the following:\r\n`/{parentSlug}/{slug}`.\r\n\r\nYou can notice that we respect the pages hierarchy in the generated url.\r\n\r\nYou can navigate through a complex list of pages or categories, as long as they\r\nare related as `parent` and `child`.\r\n\r\nThis allows you to have such urls like this one :\r\n`http://www.mysite.com/about/company/team/members` for instance, will show only\r\nthe `members` page, but its parent has a parent, that has a parent, and so on,\r\nuntil you reach the \"root\" parent. And it's the same behavior for categories.\r\n\r\n*Note:* this behavior is the precise reason why you have to use a specific rules\r\nfor your routing, unless you may have many \"404\" errors.\r\n\r\n### Generate a route based on a single page\r\n\r\n*Note:* This behavior also works for categories.\r\n\r\nIf you have a `Page` object in a view or in a controller, you can get the whole\r\narborescence by using the `getTree()` method, which will navigate through all\r\nparents and return a string based on a separator argument (default `/`, for urls).\r\n\r\nLet's get an example with this kind of tree:\r\n\r\n```\r\n/ - Home (root url)\r\n├─ /welcome       - Welcome page (set as \"homepage\", so \"Home\" will be the same)\r\n│  ├─ /welcome/our-company            - Our company\r\n│  ├─ /welcome/our-company/financial  - Financial\r\n│  └─ /welcome/our-company/team       - Team\r\n└─ Contact\r\n```\r\n\r\nImagine we want to generate the url for the \"Team\" page. You have this `Page`\r\nobject in your view/controller.\r\n\r\n```twig\r\n    {# Page : \"Team\" #}\r\n    {{ path('orbitale_cms_page', {\"slugs\": page.tree}) }}\r\n    {# Will show : /welcome/our-company/team #}\r\n```\r\n\r\nOr in a controller:\r\n\r\n```php\r\n    // Page : \"Team\"\r\n    $url = $this->generateUrl('orbitale_cms_page', ['slugs' => $page->getTree()]);\r\n    // $url === /welcome/our-company/team\r\n```\r\n\r\nWith this, you have a functional tree system for your CMS!\r\n\r\n## Change homepage\r\n\r\nThe homepage is always the first `Page` object with its `homepage` attribute set\r\nto true. Be sure to have only one element defined as homepage, or you may have\r\nunexpected results.\r\n\r\nYou can have multiple homepages if you add them restrictions based on host and\r\nlocale (see [next chapter](#page-restriction)).\r\n\r\n## <a name=\"page-restriction\"></a>Page restriction based `host` and/or `locale`\r\n\r\nIf you are hosting your application in a multi-domain platform, you can use the\r\n`host` attribute in your page to restrict the view only to the specified host.\r\n\r\nIt's great for example if you want to have different articles on different\r\ndomains like `blog.mydomain.com` and `www.mydomain.com`.\r\n\r\nIf you want to restrict by `locale`, you can specify the locale in the page.\r\nThe best conjointed use is with prefixed routes in the routing file:\r\n\r\n```yml\r\n# app/config/routing.yml\r\norbitale_cms_page:\r\n    resource: \"@OrbitaleCmsBundle/Controller/PageController.php\"\r\n    type:     annotation\r\n    # Add the locale to the prefix for if the page's locale is specified and is\r\n    # not equal to request locale, the app will return a 404 error.\r\n    prefix:   /{_locale}/page/\r\n```\r\n\r\n## Design\r\n\r\n`OrbitaleCmsBundle` has some options to customize the design of your simple CMS.\r\n\r\nMostly, you will take care of the `layouts` option (see\r\n[next chapter](#using-different-layouts)), or the `design` option.\r\n\r\n### Using different layouts\r\n\r\nObviously, the default layout has no style.\r\n\r\nTo change the layout, simply change the OrbitaleCmsBundle configuration to add\r\nyour own layout:\r\n\r\n```yaml\r\n# app/config/config.yml\r\norbitale_cms:\r\n    layouts:\r\n        front: { resource: @App/layout.html.twig } # The Twig path to your layout\r\n```\r\n\r\nWithout overriding anything, you can easily change the layout for your CMS!\r\n\r\nTake a look at the [default layout](Resources/views/default_layout.html.twig)\r\nto see which Twig blocks are mandatory to render correctly the pages.\r\n\r\n### Advanced layout configuration\r\n\r\nThe basic configuration for a layout is to specify a template to extend.\r\n\r\nBut if you look at the [Configuration reference](#configuration-reference) you\r\n will see that there are many other parameters you can use to define a layout:\r\n\r\nPrototype of a layout configuration:\r\n* **name** (attribute used as key for the layouts list):<br>\r\n The name of your layout. Simply for readability issues, and maybe to get it\r\n directly from the config (if you need it).\r\n* **resource**:<br>\r\n The Twig template used to render all the pages (see the [above](#using-different-layouts) section)\r\n* **assets_css** and *assets_js*:<br>\r\n Any asset to send to the Twig `asset()` function. The CSS is rendered in the\r\n `stylesheets` block, and js in the `javascripts` block.\r\n* **host**:<br>\r\n The exact domain name you want the layout to match with.\r\n* **pattern**:<br>\r\n The regexp of the path you want to match with for this layout.\r\n It's nice if you want to use a different layout for categories and pages. For\r\n example, you can specify a layout for the `^/page/` pattern, and another for\r\n `^/category/`.\r\n If you specify a very deep pattern, you can even change the layout for a single\r\n page!\r\n\r\nTake another look on the [config reference](#configuration-reference) if you\r\nneed to get the prototype defaults.\r\n\r\n:warning: **Warning!** The **first matching** layout will be used, as well as\r\n routing would do, so be sure to configure them in the right order!<br>\r\nEmpty values won't be taken in account.\r\n\r\n### <a name=\"breadcrumbs\"></a>Changing the \"breadcrumbs\" look\r\n\r\nUnder the `design` option, you have some that you can use to optimize the\r\nrendering of the breadcrumbs.\r\n\r\nBasically, it will look like this:\r\n\r\n[Homepage](#breadcrumbs) > [Parent page](#breadcrumbs) > Current page\r\n\r\n**Note:** The breadcrumbs wrapper already has `id=\"breadcrumbs\"` on its tag.\r\n\r\n* **breadcrumbs_class**:<br>\r\n  Changes the class of the breadcrumbs wrapper.\r\n* **breadcrumbs_link_class**:<br>\r\n  Changes the class of any link in the breadcrumbs.\r\n* **breadcrumbs_current_class**:<br>\r\n  Changes the class of the current page in the breadcrumbs (which is not a link).\r\n* **breadcrumbs_separator** *(default: \">\")*:<br>\r\n  Changes the default separator used. You can use anything, but mostly we see `>`,\r\n  `/`, `|` or `*` on the web.<br>\r\n  **Note:** This character is escaped in twig, so do not use things like `&larr;`\r\n  or the `&` sign will be replaced with `&amp;` (as well as other characters).\r\n* **breadcrumbs_separator_class**:<br>\r\n  You can specify a class for the separator (which is wrapped by a `<span>` tag),\r\n  if you want to use special design or interaction on it.\r\n\r\n## Cache\r\n\r\nIf you want to cache your cms results, just activate it via the config:\r\n\r\n```yml\r\n    cache:\r\n        enabled: true\r\n        ttl: 300\r\n```\r\n\r\nIt uses Doctrine Result Cache so you need to activate it:\r\n\r\n```yml\r\n    doctrine:\r\n        orm:\r\n            result_cache_driver: apc\r\n```\r\n\r\nYou can read more about DoctrineCache <a href=\"http://symfony.com/doc/current/reference/configuration/doctrine.html#caching-drivers\">here</a>.\r\n\r\n## <a name=\"easyadmin\"></a>Setup EasyAdminBundle to manage pages and categories in its back-end\r\n\r\nThis configuration allows you to manage your pages and categories directly in the [EasyAdminBundle](https://github.com/javiereguiluz/EasyAdminBundle) way.\r\n\r\nFirst, install `EasyAdminBundle`, and set it up by reading its documentation (view link above).\r\n\r\nAfter you installed it, you can add this configuration to inject your new classes in EasyAdmin:\r\n\r\n```yml\r\n# app/config/config.yml\r\neasy_admin:\r\n    entities:\r\n        Pages:\r\n            label: admin.cms.pages\r\n            class: Orbitale\\Bundle\\CmsBundle\\Entity\\Page\r\n            show:\r\n                fields: [ id, parent, title, slug, tree, content, metaDescription, metaTitle, category, host, locale, homepage, enabled ]\r\n            list:\r\n                fields: [ id, parent, title, slug, tree, host, locale, { property: homepage, type: boolean }, { property: enabled, type: boolean } ]\r\n            form:\r\n                fields: [ title, slug, content, metaDescription, metaTitle, metaKeywords, css, js, category, parent, host, homepage, enabled ]\r\n\r\n        Categories:\r\n            label: \"Cms Categories\"\r\n            class: Orbitale\\Bundle\\CmsBundle\\Entity\\Category\r\n            show:\r\n                fields: [ id, parent, title, slug, tree, content, host, locale, homepage, enabled ]\r\n            list:\r\n                fields: [ id, parent, name, slug, description, { property: enabled, type: boolean } ]\r\n            form:\r\n                fields: [ name, slug, description, parent, enabled ]\r\n```\r\n\r\n## Configuration reference\r\n\r\n```yml\r\n# app/config/config.yml\r\norbitale_cms:\r\n    page_class: ~              # Required, must extend Orbitale Page class\r\n    category_class: ~          # Required, must extend Orbitale Category class\r\n    layouts:\r\n        # Prototype\r\n        name:\r\n            name:       ~      # Optional, it's automatically set from the key if it's a string\r\n            resource:   ~      # Required, must be a valid twig template\r\n            assets_css: []     # Injected with the `asset()` twig function\r\n            assets_js:  []     # Injected with the `asset()` twig function\r\n            pattern:    ~      # Regexp\r\n            host:       ~      # Exact value\r\n    design:\r\n        breadcrumbs_class:           \"breadcrumb\"  # The default value automatically suits to Bootstrap\r\n        breadcrumbs_link_class:      \"\"\r\n        breadcrumbs_current_class:   \"\"\r\n        breadcrumbs_separator:       \">\"\r\n        breadcrumbs_separator_class: \"breadcrumb-separator\"\r\n    cache:\r\n        enabled: false\r\n        ttl: 300\r\n\r\n```\r\n\r\n## Changelog\r\n\r\nGo to the [releases](https://github.com/Orbitale/CmsBundle/releases) page to see what are the changes between each\r\nnew version of Orbitale CmsBundle!\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}